\2 {Автоматизированный метод построения эксплойтов для уязвимости переполнения буфера на стеке} {paper_buffer_overflow_stack}

\paperblock {buffer_overflow_stack}

\page {1} Анализ бинарного кода (в сравнении с исходным кодом) может быть более предпочтительным (абстракция языка высокого уровня может скрывать особенности работы, важные для выявления ошибок) \comment {to thesis}. \comment {Вообще, при символьном выполнении можно как ветвиться и строить разные наборы условий (предикаты пути), так и строить один общий набор условий (например, с использованием \abbr {ITE}) — не предикат пути. Но только при условии развёртки циклов.} \page {2} \i {Эксплойт} — набор данных, эксплуатирующих уязвимость. Они получают трассы машинных инструкций из полносистемного эмулятора. Некая среда анализа бинарного кода выделяет алгоритмы из бинарного кода и повышает уровень их представления. Из трассы выделяются только те инструкции, которые относятся к обработке входных данных с момента их получения до падения (с помощью слайсинга с taint-анализом). \abbr {IR} {промежуточное представление} — Pivot (\abbr {SSA}).

Рассматривается переполнение буфера на стеке. \page {3} Это может привести к перезаписи адреса возврата и аргументов функции. Адрес возврата можно заменить на переход на вредоносный код. Если включён \abbr {DEP} {data execution prevention} (защита от выполнения кода в стеке), можно использовать \ref {#rop} {\abbr {ROP} {return-oriented programming}} для составления полезной нагрузки из существующего кода. От \ref {#aslr} {\abbr {ASLR} {address space layout randomization}} могут помочь трамплины. \i {Шелл-код} — код полезной нагрузки.

Основная схема:
\list
    {выделение подтрассы,}
    {построение предиката пути,}
    {поиск трамплинов,}
    {построение экспойта.}

Слайсинг удаляет непомеченные инструкции из трассы. \page {4} Начальный буфер со входными данными задаёт аналитик (обычно — результаты вызовов \m {read()}). Потом нужно найти инструкцию, которая перезаписывает одну из ячеек с адресом возврата, и шаг с переходом по перезаписанному адресу.

\image10 {image/diagram/stack.svg} {Стек вызова}

В трассе ищутся прерывания, после которых был вызван код обработчика исключения. Выясняется, было ли нарушено выполнение.

\page {5} Слайс трассы транслируется в Pivot \abbr {IR}, а Pivot \abbr {IR} в \abbr {SMT}-\abbr {LIB} формулу. Вместо непомеченных ячеек подставляются конкретные значения. Если конкретное значение восстановить не удалось, она считается символьной. Вычисление флагов ленивое. \comment {Можно это же добавить в \ref {#triton} {Triton}?} Регистр счётчика команд не символьный.

\page {6} Для поиска области памяти под шелл-код и передача управления в область также задаётся с помощью уравнений.

\pages {9 pages}


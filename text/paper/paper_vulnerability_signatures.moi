\2 {Theory and Techniques for Automatic Generation of Vulnerability-Based Signatures} {paper_vulnerability_signatures}

\paperblock {vulnerability_signatures}

\page {1} Signature can be represented as regexp, Turing-complete language, etc. They consider multiple-path vulnerabilities. They have reduced exponential explosion to \simplemath {\i {O}(\i {n}\super {2})}. \term {Vulnerability}—a type of bug can be used to alter program execution. \term {Exploit}—input for vulnerability. We need signature-based filtering to immediately stop outbreak. \page {2} \i {Signature should be constructed based on the property of the vulnerability, instead of an exploit.} \comment {So, no \ref {#fuzzing} {fuzzing}.} \page {3} /* skipped related work */Signature is indifferent to the specific type of attack.

\page {4} They define vulnerability as Boolean predicate on the space of program executions. Predicate is checked by \term {execution monitor}. \term {Security policy} is a \term {safety property} if policy violation on path means policy violation on some finite subpath. Vulnerability has \term {vulnerability condition} and \term {vulnerability point}. They trying to create \i {sound}, but may be \i {incomplete} signature generators. \comment {No \abbr {FP} {false positives}, but may be \abbr {FN} {false negatives}.}


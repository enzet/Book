\2 {Taking a Glance at Real Programming Code Through the Lense of \abbr {DRAKON} Language} {paper_drakon}

\paperblock {drakon}

\3 {Рецензия} {paper_drakon_review}

В статье рассматривается важная и крайне актуальная на сегодняшний день проблема восприятния и понимания разработчиком крупных программных систем, которые могут состоять из множества различных файлов и содержать миллионы строк кода.

Рассматриваются недостатки современных интегрированных сред разработки (\abbr {IDE}) при работе с текстовым представлением. Хотя наличие таких недостатков и не вызывает сомнения, конкретные приведённые проблемы всё же так или иначе решаются в современных \abbr {IDE}: в них используется навигация по коду, возможность разбить содержимое файла на несколько рабочих полей, свёртка структурных частей кода и т. д.

Достаточно хорошо для краткой статьи описаны преимущества графического представления кода, такие как, например, выделение вызовов функций, отображение изменений и результатов поиска. Особенно следует отметить возможности по отслеживанию стека вызовов при отладке.

Однако, не показано, каким образом графический способ отображения может решать проблему невозможности отобразить одновременно большие объёмы кода. Из рассуждений и приведённых примеров не следует, что графический способ более компактный. Например, для приведённых примеров \abbr {ДРАКОН}-диаграмм не приведены их текстовые представления, что позволило бы оценить достоинства графического языка. В связи с этим (поскольку данная проблема выделена в самом начале как одна из основных), хотелось бы увидеть способы решения этой проблемы. Возможно ли проводить автоматическую или автоматизированную кластеризация графа программы для возможности масштабирования отображения? Например, можно ли реализовать интерактивный переход от более компактного графа вызовов к более подробному графу потока управления?

В рамках этой же проблемы хотелось бы увидеть освещёнными задачи избавления от визуального информационного шума, использования цветогого кодирования элементов графа, дробления элементов графа на более мелкие (для избавления от большого количества текста) или наоборот слияния элементов (для более компактного отображения).

В целом смущает в некотором роде «рекламный» стиль статьи. Можно заключить, что цель статьи состоит в описании языка \abbr {ДРАКОН} и его применения. При этом описываются только достоинства и области применения языка и не указывается, какие проблемы решались и какие решения применялись при создании диаграмм на этом языке и при разработке программного средства для их создания.


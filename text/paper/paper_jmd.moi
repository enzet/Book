\2 {\abbr {JMD} \[Java Malware Detector\]: A Hybrid Approach for Detecting Java Malware} {paper_jmd}

\paperblock {jmd}

\quote {2015. Adrian Herrera, Ben Cheney (\ref {https://twitter.com/cheneyben} {\m {@cheneyben}}). See \ref {http://crpit.com/confpapers/CRPITV161Herrera.pdf} {\abbr {PDF} online}, \ref {https://twitter.com/cheneyben/status/578128561103491072} {tweet}.}

This paper is about \i {malware detection}, not about \i {defect detection}.

\date {13.05.2015} \page {1} \abbr {JMD} uses combination of (1) symbolic execution, (2) instrumentation and (3) dynamic analysis. They use \ref {#jpf} {Java PathFinder} and \ref {#aspectj} {AspectJ}. Number of vulnerabilities increases from 2001 to 2013. The most common delivery for exploits is a Java \b {applet} (\comment {read about!}).
\date {15.05.2015} Application is executed under sandbox. There is a problem: malware can evade detection by remaining dormant until trigger is met, solution: \b {alternative paths exploration} (using \abbr {SE}). \page {2} Tool works with Java bytecode. There is no native code deterctors. (\comment {see later}).

